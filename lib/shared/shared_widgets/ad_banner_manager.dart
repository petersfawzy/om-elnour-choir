import 'package:flutter/material.dart';

/// ูุฏูุฑ ุงูุฅุนูุงูุงุช ุงููุฑูุฒู
/// ูุชุนุงูู ูุน ุฏูุฑุฉ ุญูุงุฉ ุงูุฅุนูุงูุงุช ููููุน ุฅุนุงุฏุฉ ุฅูุดุงุก view ุฃุซูุงุก ุงูุชููู
class AdBannerManager {
  // Singleton pattern
  static final AdBannerManager _instance = AdBannerManager._internal();

  factory AdBannerManager() {
    return _instance;
  }

  AdBannerManager._internal();

  // ุชุฎุฒูู ุฅุดุงุฑุงุช ุฅูู ุนูุงุตุฑ ุงูุฅุนูุงูุงุช ุงููุดุทุฉ
  final Map<String, GlobalKey> _adKeys = {};

  // ุชุชุจุน ุขุฎุฑ ููุช ุชู ููู ุงุณุชุฎุฏุงู ูู ููุชุงุญ
  final Map<String, DateTime> _lastUsedTime = {};

  // ุฏุงูุฉ ููุญุตูู ุนูู ููุชุงุญ ูุฅุนูุงู ูุญุฏุฏ
  // ุงุณุชุฎุฏู ููุณ ุงูููุชุงุญ ููุฅุนูุงู ููุณู ูููุน ุฅุนุงุฏุฉ ุฅูุดุงุกู
  GlobalKey getAdKey(String cacheKey) {
    if (!_adKeys.containsKey(cacheKey)) {
      _adKeys[cacheKey] = GlobalKey();
      _lastUsedTime[cacheKey] = DateTime.now();
      print('๐ท๏ธ ุฅูุดุงุก ููุชุงุญ ุฌุฏูุฏ ููุฅุนูุงู: $cacheKey');
    } else {
      _lastUsedTime[cacheKey] = DateTime.now();
      print('โป๏ธ ุงุณุชุฎุฏุงู ููุชุงุญ ููุฌูุฏ ููุฅุนูุงู: $cacheKey');
    }
    return _adKeys[cacheKey]!;
  }

  // ุฏุงูุฉ ูุชุญุฏูุซ ููุชุงุญ ุฅุนูุงู ุนูุฏ ุงูุญุงุฌุฉ (ูุซูุงู: ุชุบูุฑ ุงูุงุชุฌุงู)
  void updateAdKey(String cacheKey) {
    _adKeys[cacheKey] = GlobalKey();
    _lastUsedTime[cacheKey] = DateTime.now();
    print('๐ ุชู ุชุญุฏูุซ ููุชุงุญ ุงูุฅุนูุงู: $cacheKey');
  }

  // ุฏุงูุฉ ูุฅุฒุงูุฉ ููุชุงุญ ุฅุนูุงู
  void removeAdKey(String cacheKey) {
    _adKeys.remove(cacheKey);
    _lastUsedTime.remove(cacheKey);
    print('๐๏ธ ุชู ุฅุฒุงูุฉ ููุชุงุญ ุงูุฅุนูุงู: $cacheKey');
  }

  // ุชูุธูู ุงูููุงุชูุญ ุบูุฑ ุงููุณุชุฎุฏูุฉ
  void cleanUnusedKeys() {
    final now = DateTime.now();
    final keysToRemove = <String>[];

    // ุงูุจุญุซ ุนู ุงูููุงุชูุญ ุงูุชู ูู ุชุณุชุฎุฏู ูุฃูุซุฑ ูู ุณุงุนุฉ
    _lastUsedTime.forEach((key, lastUsed) {
      if (now.difference(lastUsed).inHours > 1) {
        keysToRemove.add(key);
      }
    });

    // ุฅุฒุงูุฉ ุงูููุงุชูุญ ุบูุฑ ุงููุณุชุฎุฏูุฉ
    for (final key in keysToRemove) {
      _adKeys.remove(key);
      _lastUsedTime.remove(key);
    }

    if (keysToRemove.isNotEmpty) {
      print(
          '๐งน ุชู ุชูุธูู ${keysToRemove.length} ูู ููุงุชูุญ ุงูุฅุนูุงูุงุช ุบูุฑ ุงููุณุชุฎุฏูุฉ');
    }
  }

  // ุงูุญุตูู ุนูู ุนุฏุฏ ุงูููุงุชูุญ ุงููุดุทุฉ
  int get activeKeysCount => _adKeys.length;
}
